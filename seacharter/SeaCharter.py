# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SeaCharter
                                 A QGIS plugin
 Charts The Sea
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-31
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Itai Levin
        email                : LevinItai94@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QCoreApplication, Qt, pyqtSignal
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import (QgsProject, QgsVectorLayer, QgsFeature, QgsGeometry, QgsDistanceArea,
                       QgsPointXY)  # Add QgsPointXY here
from qgis.gui import QgsMapToolEmitPoint
import os
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .SeaCharter_dialog import SeaCharterDialog
import os.path


class SeaCharter:
    
 
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.dlg = SeaCharterDialog()
        self.selecting_points = False
        self.paused = False
        self.courses_layer = QgsVectorLayer("LineString?crs=EPSG:4326", "Courses", "memory")
        self.labels_layer = QgsVectorLayer("Point?crs=EPSG:4326&field=distance:string(50)", "Course labels", "memory")
        QgsProject.instance().addMapLayer(self.courses_layer)
        QgsProject.instance().addMapLayer(self.labels_layer)
        self.point_distances = []

    def initGui(self):
        self.action_start = QAction(
            QIcon(":/plugins/SeaCharter/start.png"),
            QCoreApplication.translate("SeaCharter", "Start"),
            self.iface.mainWindow()
        )
        self.action_start.triggered.connect(self.run)
        self.iface.addToolBarIcon(self.action_start)
        self.iface.addPluginToMenu("SeaCharter", self.action_start)

        self.action_finish = QAction(
            QIcon(":/plugins/SeaCharter/finish.png"),
            QCoreApplication.translate("SeaCharter", "Finish"),
            self.iface.mainWindow()
        )
        self.action_finish.triggered.connect(self.finish)
        self.iface.addToolBarIcon(self.action_finish)
        self.iface.addPluginToMenu("SeaCharter", self.action_finish)

        # Pause/resume action
        self.action_pause_resume = QAction(
            QIcon(":/plugins/SeaCharter/pause.png"),
            QCoreApplication.translate("SeaCharter", "Pause/Resume"),
            self.iface.mainWindow()
        )
        self.action_pause_resume.triggered.connect(self.pause_resume)
        self.iface.addToolBarIcon(self.action_pause_resume)
        self.iface.addPluginToMenu("SeaCharter", self.action_pause_resume)

    def unload(self):
   
        self.iface.removeToolBarIcon(self.action_start)
        self.iface.removeToolBarIcon(self.action_finish)
        self.iface.removeToolBarIcon(self.action_pause_resume) # Include removal of pause/resume button

        self.iface.removePluginMenu("SeaCourseBuilder", self.action_start)
        self.iface.removePluginMenu("SeaCourseBuilder", self.action_finish)
        self.iface.removePluginMenu("SeaCourseBuilder", self.action_pause_resume) # Include removal of pause/resume button



    def run(self):        
        self.selecting_points = True
        self.points = []
        self.total_distance = 0.0  # Initialize the total distance
        self.point_tool = PointTool(self.iface.mapCanvas())
        self.point_tool.pointSelected.connect(self.select_point)
        self.point_tool.pointDeleted.connect(self.delete_point)
        self.iface.mapCanvas().setMapTool(self.point_tool)

    def delete_point(self):
        if not self.selecting_points or not self.points:
            return

        # Remove the last point from the list and update total distance
        last_point = self.points.pop()
        if self.points:  # if there are still points in the list
            d = QgsDistanceArea()
            d.setEllipsoid('WGS84')
            distance = d.measureLine(self.points[-1], last_point)
            self.total_distance -= distance
            self.point_distances.pop()
        else:
            self.point_distances = []

        self.update_courses_layer()

    def pause_resume(self):
        if self.paused:
            self.paused = False
            self.action_pause_resume.setIcon(QIcon(":/plugins/SeaCharter/pause.png"))
            self.iface.mapCanvas().setMapTool(self.point_tool)
        else:
            self.paused = True
            self.action_pause_resume.setIcon(QIcon(":/plugins/SeaCharter/resume.png"))
            self.iface.mapCanvas().unsetMapTool(self.point_tool)

    def select_point(self, point):
        if not self.selecting_points:
            return

        if self.points:  # if there are already points in the list
            d = QgsDistanceArea()
            d.setEllipsoid('WGS84')
            distance = d.measureLine(self.points[-1], point)
            self.total_distance += distance
            print(f"Distance from last point: {distance * 0.000539957:.2f} Nautical Miles")
            self.point_distances.append(distance * 0.000539957)
        else:
            self.point_distances.append(0.0)

        self.points.append(point)

        if len(self.points) > 1:
            # Check if the layer already exists
            self.courses_layer = None
            for layer in QgsProject.instance().mapLayers().values():
                if layer.name() == 'Courses':
                    self.courses_layer = layer
                    break

            # If not, create it
            if self.courses_layer is None:
                self.courses_layer = QgsVectorLayer("LineString?crs=EPSG:4326", "Courses", "memory")
                QgsProject.instance().addMapLayer(self.courses_layer)

            self.update_courses_layer()

    def finish(self):
        if not self.selecting_points:
            return

        total_distance_NM = self.total_distance * 0.000539957

        print(f"Total Distance: {total_distance_NM} Nautical Miles")
        print(f"Estimated Time to Cover Distance: ")
        print(f"At 10 Kn: {total_distance_NM/10.0:.2f} hours")
        print(f"At 15 Kn: {total_distance_NM/15.0:.2f} hours")
        print(f"At 20 Kn: {total_distance_NM/20.0:.2f} hours")
        
        self.iface.mapCanvas().unsetMapTool(self.point_tool)
        self.selecting_points = False

    def update_courses_layer(self):
    # Clear and recreate the course layer
        self.courses_layer.startEditing()
        self.courses_layer.deleteFeatures([f.id() for f in self.courses_layer.getFeatures()])
        self.courses_layer.commitChanges()

        course_feature = QgsFeature()
        course_feature.setGeometry(QgsGeometry.fromPolylineXY(self.points))

        self.courses_layer.startEditing()
        self.courses_layer.addFeature(course_feature)
        self.courses_layer.commitChanges()

        # Clear and recreate the label layer
        self.labels_layer.startEditing()
        self.labels_layer.deleteFeatures([f.id() for f in self.labels_layer.getFeatures()])
        self.labels_layer.commitChanges()

        # Add label features
        for i, point in enumerate(self.points):
            label_feature = QgsFeature(self.labels_layer.fields())
            label_feature.setGeometry(QgsGeometry.fromPointXY(point))
            label_text = "Point No.: " + str(i + 1) + "\n"
            label_text += f"{self.point_distances[i]:.2f} NM"
            label_feature['distance'] = label_text
            self.labels_layer.startEditing()
            self.labels_layer.addFeature(label_feature)
            self.labels_layer.commitChanges()


class PointTool(QgsMapToolEmitPoint):
    pointSelected = pyqtSignal(QgsPointXY)
    pointDeleted = pyqtSignal()

    def __init__(self, canvas):
        super().__init__(canvas)

    def canvasReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:  # Left-click adds a point
            point = self.toMapCoordinates(event.pos())
            self.pointSelected.emit(point)
        elif event.button() == Qt.RightButton:  # Right-click removes the last point
            self.pointDeleted.emit()
